@model BabyStore.Models.Product

@using BabyStore.Views.Shared

@{
    ViewBag.Title = SiteResource.Create;
   
}

<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

@section Scripts
     {
   @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-1.12.4.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

    <script type="text/javascript">


        $(document).ready(function () {
            $('#DateProduct').datepicker({
                format: 'dd/MM/yyyy',

                changeYear: true,
                changeMonth: true,
                //changeRange:
                minDate: new Date(2018, 0, 1),
                maxDate: new Date(2025, 1, 1),
                showOn: "both",
                // buttonText: " <i class='fa fa-calender'> </i>"
            });
        });

        $(document).ready(function () {
            $('#DateExpire').datepicker({
                format: 'dd/MM/yyyy',
                changeYear: true,
                changeMonth: true,
                //changeRange:
                minDate: new Date(2018, 0, 1),
                maxDate: new Date(2025, 1, 1),
                showOn: "both",
           
                //buttonText: " <i class='fa fa-calender'> </i>"
            });
        });


       /*$(document).ready(function () {
            $("#CategoryID").change(function () {
                // var cID = $(this).val();
                $.get('@@Url.Action("GetSubCategoryById")', { CategoryID: $("#CategoryID").val() }, function (data) {
                    $("#SubCategoryID").empty();
                    if (data != null && !jQuery.isEmptyObject(data)) {
                        $.each(data, function (index, row) {

                            $("#SubCategoryID").append("<option value='"+ row.SubCategoryID + "'>" + row.SubCategoryName + "</option>");
                        });
                    };
                    });
                    })

        });*/



        function ImageShow(imgeUpload, previewImage) {
            if (imgeUpload.files && imgeUpload.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $(previewImage).attr('src', e.target.result);
                }
                reader.readAsDataURL(imgeUpload.files[0]);

            }
        }
    </script>


}

@using (Html.BeginForm("Create","Products", FormMethod.Post, new { enctype ="multipart/form-data" })) 
{
    @Html.AntiForgeryToken()
    
     <div class="form-horizontal">
   
    <div class="row">
       
        <div class="col-md-6">
           
            
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.BuyPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.BuyPrice, new { htmlAttributes = new { @class = "form-control", data_val_number = "The price must be a number." } })
                        @Html.ValidationMessageFor(model => model.BuyPrice, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", data_val_number = "The price must be a number." } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CountryProuduct, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.EditorFor(model => model.CountryProuduct, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CountryProuduct, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DateProduct, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.DateProduct, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DateProduct, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DateExpire, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.TextBoxFor(model => model.DateExpire, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DateExpire, "", new { @class = "text-danger" })
                    </div>
                </div>

               
            

            <div class="form-group">
                @Html.LabelFor(model => model.InventoryID, "InventoryID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("InventoryID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.InventoryID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.DropDownList("Quantity", Enumerable.Range(1, 15).Select(s => new SelectListItem { Text = s.ToString(), Value = s.ToString() }))
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new {@class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (ViewBag.CategoryID != null)
                    {
                        @Html.DropDownListFor(model => model.CategoryID, ViewBag.CategoryID as SelectList, "Select Category", new { @class = "form-control", id = "CategoryID" })

                        @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                    }

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SubCategoryID, "SubCategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
                
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SubCategoryID, ViewBag.SubCategoryID as SelectList, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SubCategoryID, "", new { @class = "text-danger" })
                </div>
            </div>

            <!--<label>Select Category</label>
           
            @@Html.DropDownListFor(model=>model.CategoryID,ViewBag.CategoryID as SelectList, "Select Category", new { id = "CategoryID", @@class = "form-control" })
           
            <label>Selectat Subcategory</label>
            @@Html.DropDownListFor(model => model.SubCategoryID, new SelectList(Enumerable.Empty<SelectListItem>(), "Value", "Text"), "Selectat Subcategory", new { id = "SubCategoryID", @@class = "form-control" })
                     -->
        </div>

        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.productImg, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <img src="~/Images/@Html.DisplayFor(model=>model.productImg)" style="margin:10px;" height="200" width="200" id="Imagepreview" />
                    <input type="file" name="upload" id="upload" onchange="ImageShow(this,document.getElementById('Imagepreview'))" />

                    @Html.ValidationMessageFor(model => model.productImg, "", new { @class = "text-danger" })

                </div>
            </div>


        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@SiteResource.Create" class="btn btn-group-xs" />
            </div>
        </div>
    </div>
   </div>
}

<div>
    @Html.ActionLink(SiteResource.BackList, "Index", null, new {@class="btn btn-primary btn-xs" })
</div>









  






